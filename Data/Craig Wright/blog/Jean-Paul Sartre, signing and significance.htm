<h1 class="entry-title">Jean-Paul Sartre, signing and significance</h1>
										<div class="post-details">
						<span>By Craig Wright</span> | <span>02 May 2016</span> | <span class="txt-color-brown">Bitcoin &amp; Blockchain Tech</span>
					</div>
					<hr width="100" class="sep">
						<p style="text-align: center;"><em>“If I sign myself Jean-Paul Sartre it is not the same thing as if I sign myself Jean-Paul Sartre, Nobel Prizewinner”</em><br>
<em>– Jean-Paul Sartre, 1964</em></p>
<p>I remember reading that quote many years ago, and I have carried it with me uncomfortably ever since. However, after many years, and having experienced the ebb and flow of life those years have brought, I think I am finally at peace with what he meant. If I sign&nbsp;<em>Craig Wright</em>, it is not the same as if I sign&nbsp;<em>Craig Wright, Satoshi</em>.</p>
<p>I think this is true, but in my heart I wish it wasn’t.</p>
<pre>IFdyaWdodCwgaXQgaXMgbm90IHRoZSBzYW1lIGFzIGlmIEkgc2lnbiBDcmFpZyBXcmlnaHQsIFNh 
dG9zaGkuCgo=</pre>
<p>I have been staring at my screen for hours, but I cannot summon the words to express the depth of my gratitude to those that have supported the bitcoin project from its inception – too many names to list. You have dedicated vast swathes of your time, committed your gifts, sacrificed relationships and REM sleep for years to an open source project that could have come to nothing. And yet still you fought. This incredible community’s passion and intellect and perseverance has taken my small contribution and nurtured it, enhanced it, breathed life into it. You have given the world a great gift. Thank you.</p>
<p>Be assured, just as you have worked, I have not been idle during these many years. Since those early days, after distancing myself from the public persona that was Satoshi, I have poured every measure of myself into research. I have been silent, but I have not been absent. I have been engaged with an exceptional group and look forward to sharing our remarkable work when they are ready.</p>
<p>Satoshi is dead.</p>
<p>But this is only the beginning.</p>
<p><strong>KEY VERIFICATION</strong></p>
<p>In the remainder of this post, I will explain the process of verifying a set of cryptographic keys.</p>
<p>To ensure that we can successfully sign and validate messages using the correct elliptic curve parameters in OpenSSL, it is necessary to ensure that the secp256k1 curve is loaded. This is not the default on Centos Linux. I will not detail this process here. I do point out that&nbsp;<a href="https://web.archive.org/web/20160502203734/http://repoforge.org/use/">RPMForge</a>&nbsp;maintains binaries that have already been patched. My recommendation would be to download both the source files from the OpenSSL website and the patch, if, like me you’re running Centos.</p>
<p>I will also point the reader to the following websites for some preliminary reading:</p>
<p><a href="https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations" target="_new" rel="noopener noreferrer">https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations</a></p>
<p><a href="http://www.secg.org/sec2-v2.pdf" target="_new" rel="noopener noreferrer">http://www.secg.org/sec2-v2.pdf</a></p>
<p><a href="https://www.openssl.org/" target="_new" rel="noopener noreferrer">https://www.openssl.org/</a></p>
<p><a href="https://www.bfccomputing.com/bitcoin-and-curve-secp256k1-on-fedora/" target="_new" rel="noopener noreferrer">https://www.bfccomputing.com/bitcoin-and-curve-secp256k1-on-fedora/</a></p>
<p>The first stage of this exercise will be to explain hash functions. In the figure below we’re displaying a file called “sn7-message.txt”.</p>
<div id="attachment_16688" style="width: 777px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16688" class="wp-image-16688 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance.png" alt="jean-paul-sartre-signing-and-significance" width="767" height="345" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance.png 941w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance-300x135.png 300w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance-768x345.png 768w" sizes="(max-width: 767px) 100vw, 767px"><p id="caption-attachment-16688" class="wp-caption-text"><em>Script fragment</em></p></div>
<p>The series of&nbsp;<a href="https://web.archive.org/web/20160502203734/https://en.wikipedia.org/wiki/Hexadecimal" target="_new" rel="noopener noreferrer">hexadecimal</a>&nbsp;values displayed in the figure above represents the&nbsp;<a href="https://web.archive.org/web/20160502203734/https://en.wikipedia.org/wiki/Secure_Hash_Algorithm" target="_new" rel="noopener noreferrer">SHA256</a>&nbsp;hash of an input value. A good hash algorithm will produce a large string of values that cannot be determined in advance. The amount of information and possible permutations always exceeds the range of imitations that can be output from any hash function and as a result, collisions will always exist. What makes a hash function such as SHA256 useful and considered “secure” is that it is infeasible given the current state of technology to determine and find a set of input values to the hash function that collides with the same value that is returned as output.</p>
<p>The SHA256 algorithm provides for a maximum message size of (2<sup>128</sup> – 1) bits of information whilst returning 32 bytes or 256 bits as an output value. The number of possible messages that can be input into the SHA256 hash function totals (2<sup>128</sup> – 1)! possible input values ranging in size from 0 bits through to the maximal acceptable range that we noted above.</p>
<p>In determining the possible range of collisions that would be available on average, we have a <a href="https://web.archive.org/web/20160502203734/https://en.wikipedia.org/wiki/Binomial_coefficient" target="_new" rel="noopener noreferrer">binomial coefficient</a> <img class="alignnone size-full wp-image-16691" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/cw7.jpg" alt="" width="39" height="45">that determines the permutations through a process known as combinatorics [1].</p>
<p>I will leave it to a later post to detail the mathematics associated with collision detection. It is important to note though that there are an incredibly large number of colliding values associated with each hash but that the probability of finding two colliding values or determining them in advance is infinitesimally small. Next week, I will follow-up with a post based on combinatorics and probability theory demonstrating the likelihood of finding collisions for “secure” hashing algorithms.</p>
<p><strong>HASHING</strong></p>
<p>Hash functions are relatively simple and can be done by hand. This of course belies the complexity that is required to reverse them. A good hash function is simple to use and yet is infeasible to reverse. In the figure below we have run the Linux hash routine “sha256sum”. This simple program will return a unique value that corresponds to a set and fixed input.</p>
<div id="attachment_16812" style="width: 800px" class="wp-caption alignleft"><img aria-describedby="caption-attachment-16812" class="wp-image-16812 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/2.mbp_.jpg" alt="" width="790" height="355" srcset="https://craigwright.net/wp-content/uploads/2019/06/2.mbp_.jpg 941w, https://craigwright.net/wp-content/uploads/2019/06/2.mbp_-300x135.jpg 300w, https://craigwright.net/wp-content/uploads/2019/06/2.mbp_-768x345.jpg 768w" sizes="(max-width: 790px) 100vw, 790px"><p id="caption-attachment-16812" class="wp-caption-text"><em>Script fragment</em></p></div>
<p>In the figure above, we have run this on several files including one that we are using for this OpenSSL signature exercise. The particular file that we will be using is one that we have called Sartre. The contents of this file have been displayed in the figure below.</p>
<div id="attachment_16813" style="width: 806px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16813" class="wp-image-16813 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/3.png" alt="" width="796" height="358" srcset="https://craigwright.net/wp-content/uploads/2019/06/3.png 941w, https://craigwright.net/wp-content/uploads/2019/06/3-300x135.png 300w, https://craigwright.net/wp-content/uploads/2019/06/3-768x345.png 768w" sizes="(max-width: 796px) 100vw, 796px"><p id="caption-attachment-16813" class="wp-caption-text"><em>Script output</em></p></div>
<p>Digital signature algorithms sign the hash of the message. It is possible to sign the message itself but in signing the hash it is possible to ensure the integrity of the message and validate that the message has not changed. If even a single space or “.” was to be altered, the hash will be radically different to the value returned initially.</p>
<p>In order write this value and save it to a file, we can use the Linux command,&nbsp;<a href="https://web.archive.org/web/20160502203734/http://linuxcommand.org/man_pages/xxd1.html" target="_new" rel="noopener noreferrer">xxd</a>. This will write the ASCII values into a hexadecimal binary file. In the command below we would be writing a string of zeros into a file called “file.name”.</p>
<p><img class="alignnone size-full wp-image-16814" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance.jpg" alt="" width="323" height="40" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance.jpg 323w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance-300x37.jpg 300w" sizes="(max-width: 323px) 100vw, 323px"></p>
<p>In doing this, we can change the string we received as output from the hashing algorithm into a hex encoded file. This will be the message we can sign and verify. It is important to validate the string of numbers that you are putting into the echo command above. If a single digit has been typed incorrectly then the message will not verify.</p>
<p><strong>PUBLIC KEYS</strong></p>
<p>In order to verify a digitally signed message we need number of components. These include:</p>
<p>The algorithm,<br>
the public key of the signing party that we wish to verify,<br>
the message that has been signed, and<br>
the digital signature file.</p>
<p>The first part of this, the algorithm is obtained through the installation of OpenSSL with the incorporation of the secp256k1 curve patch. In the step above we covered the creation of a hashed message. In the next section we will cover the use of ECDSA public keys.</p>
<div id="attachment_16815" style="width: 766px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16815" class="wp-image-16815 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/4.png" alt="" width="756" height="549" srcset="https://craigwright.net/wp-content/uploads/2019/06/4.png 941w, https://craigwright.net/wp-content/uploads/2019/06/4-300x218.png 300w, https://craigwright.net/wp-content/uploads/2019/06/4-768x557.png 768w" sizes="(max-width: 756px) 100vw, 756px"><p id="caption-attachment-16815" class="wp-caption-text"><em>Script fragment</em></p></div>
<p>For this exercise I am using a public-private key pair that is saved is a PEM file in OpenSSL.&nbsp;<a href="https://web.archive.org/web/20160502203734/http://davidederosa.com/basic-blockchain-programming/elliptic-curve-keys/" target="_new" rel="noopener noreferrer">David Derosa</a>&nbsp;has written an excellent page defining the creation of an elliptic curve key pair in OpenSSL. In the figure above you can see the particular PEM format public key that is associated with the key pair used in signing the message in this exercise. A thorough reading of&nbsp;<a href="https://web.archive.org/web/20160502203734/http://davidederosa.com/basic-blockchain-programming/elliptic-curve-keys/" target="_new" rel="noopener noreferrer">David’s page</a>&nbsp;will provide all of the information for the reader detailing how a private key pair used in bitcoin transaction can be formatted as a PEM file. This page details the creation of a new private key and not how an existing private key can be imported into OpenSSL. I shall cover this additional process and demonstrate how an existing private key pair based on elliptic curve cryptography can be imported into a ASN.1 format for use with OpenSSL directly.</p>
<p>The command to export our public key is given below.</p>
<p><img class="alignnone size-full wp-image-16816" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance2.jpg" alt="" width="344" height="103" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance2.jpg 344w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance2-300x90.jpg 300w" sizes="(max-width: 344px) 100vw, 344px"></p>
<p>The string returned is the public key value used by programs including bitcoin for the verification and addressing of the signing function.</p>
<p><a href="https://web.archive.org/web/20160502203734/https://casascius.wordpress.com/2013/01/26/bitcoin-address-utility/" target="_new" rel="noopener noreferrer">Casascius</a>&nbsp;has developed a nifty tool that will help you decode this public key and return the associated bitcoin address that it maps to. We have a blog on this site that will help you understand the technical aspects of how bitcoin addresses derived from the public and private keys. Several&nbsp;<a href="https://web.archive.org/web/20160502203734/http://bitcoinvalued.com/tools.php" target="_new" rel="noopener noreferrer">online tools</a>&nbsp;are also available that can calculate the bitcoin address from the public key.</p>
<p><strong>SIGNING</strong></p>
<p>The process of digitally signing a message using OpenSSL requires that the party signing the message has access to the private key. I will document and cover this process further in a later post. In recent sessions, I have used a total of 10 private keys are associated with bitcoin addresses. These were loaded into&nbsp;<a href="https://web.archive.org/web/20160502203734/https://electrum.org/#home">Electrum</a>, an SPV wallet. In one of the exercises, I signed messages that I will not detail on this post for a number of individuals. These were not messages that I personally selected, but rather ones that other people had selected. In some instances, we ensure the integrity of the process by downloading a new version of the electrum program, installing it on a fresh laptop that has just been unboxed having been purchased that afternoon and validating the signed messages on the new machine.</p>
<p>The version of electrum that I run is on Centos Linux v7 and runs via Python. For the exercise I noted above we used Windows 7 and Windows 10 on different occurrences.</p>
<p><strong>SIGNATURE VERIFICATION</strong></p>
<p>The final component that we need to cover is the signature itself. We will be using the following command to convert our base64 format signature into a file format that can be loaded into OpenSSL.</p>
<p><img class="alignnone size-full wp-image-16817" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance3.jpg" alt="" width="801" height="34" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance3.jpg 801w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance3-300x13.jpg 300w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance3-768x33.jpg 768w" sizes="(max-width: 801px) 100vw, 801px"></p>
<p>The signature filed we will be verifying contains the following data.</p>
<p><img class="alignnone size-full wp-image-16818" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance4.jpg" alt="" width="567" height="73" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance4.jpg 567w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance4-300x39.jpg 300w" sizes="(max-width: 567px) 100vw, 567px"></p>
<p>In the figure below we display the signature file as it is stored on the computer that was used for this process and we see the result of the verification exercise. In saving this file, you could cut-and-paste the encoded signature and insert it into a saved file using an editor program such as vim. Not that I’m looking at getting into a holy war over the choice of editing programs.</p>
<div id="attachment_16819" style="width: 773px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16819" class="wp-image-16819 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/5.png" alt="" width="763" height="343" srcset="https://craigwright.net/wp-content/uploads/2019/06/5.png 941w, https://craigwright.net/wp-content/uploads/2019/06/5-300x135.png 300w, https://craigwright.net/wp-content/uploads/2019/06/5-768x345.png 768w" sizes="(max-width: 763px) 100vw, 763px"><p id="caption-attachment-16819" class="wp-caption-text"><em>Script fragment</em></p></div>
<p>There are two possible outputs from this process that concern us. OpenSSL will either return as “Verified OK” where we have validly verified the signature. All of the information that is required to import the public key, the message and the message signature used in this post is available on this post.</p>
<p>I could have simply signed a message in electrum as I did in private sessions. Loading such a message would have been far simpler. I am known for a long history of “being difficult” and disliking being told what “I need to do”. The consequence of all of this is that I will not make it simple.</p>
<p><strong>SOME SCRIPTS</strong></p>
<p>In order to simplify this process, I have included two shell scripts. For variations on scripts like these, please visit a site such as the one hosted by&nbsp;<a href="https://web.archive.org/web/20160502203734/http://www.zimuel.it/">Enrico Zimuel</a>. This site is not particularly focused on elliptic curve cryptography but it is not too difficult to update his code for the use on a bitcoin based system.</p>
<p><strong>SIGNING</strong></p>
<p>For you to try and test this at your leisure I have included the signing script below. To use this script, the input consists of the variable &lt;file&gt; which signifies the file that you desire to sign using a selected &lt;private_key&gt; under your control. In this command, the &lt;private_key&gt; variable represents the file containing the private key to be used in signing the message and which will output the signature.</p>
<p><img class="alignnone size-full wp-image-16820" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance5.jpg" alt="" width="265" height="41"></p>
<p>The output from this shell script consists of the signature saved as a Base64 encoded file. This will be saved to your hard drive or other location using Base64 format as a file named &lt;signature.der&gt;.</p>
<div id="attachment_16821" style="width: 686px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16821" class="wp-image-16821 " src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/EcDSA.sign_.png" alt="" width="676" height="404" srcset="https://craigwright.net/wp-content/uploads/2019/06/EcDSA.sign_.png 714w, https://craigwright.net/wp-content/uploads/2019/06/EcDSA.sign_-300x179.png 300w" sizes="(max-width: 676px) 100vw, 676px"><p id="caption-attachment-16821" class="wp-caption-text"><em>EcDSA.sign.sh</em></p></div>
<p><strong>VERIFICATION</strong></p>
<p>We can use a similar process to verify the signature we have created using the script that I have included below.</p>
<p><img class="alignnone size-full wp-image-16822" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/jean-paul-sartre-signing-and-significance6.jpg" alt="" width="351" height="31" srcset="https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance6.jpg 351w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance6-300x26.jpg 300w, https://craigwright.net/wp-content/uploads/2019/06/jean-paul-sartre-signing-and-significance6-350x31.jpg 350w" sizes="(max-width: 351px) 100vw, 351px"></p>
<p>In this commandline, the variable &lt;file&gt; is used to signify the name of the file we seek to verify. The variable &lt;signature&gt; represents the file where we have saved the signature (and coded using Base64), and the final variable, &lt;public_key&gt; contains the PEM formatted public key. We use these files together and if they are valid and correct they will allow us to successfully to verify the digital signature.</p>
<div id="attachment_16823" style="width: 694px" class="wp-caption alignnone"><img aria-describedby="caption-attachment-16823" class="wp-image-16823 size-full" src="./Craig Wright - Jean-Paul Sartre, signing and significance_files/EcDSA.verify.png" alt="" width="684" height="536" srcset="https://craigwright.net/wp-content/uploads/2019/06/EcDSA.verify.png 684w, https://craigwright.net/wp-content/uploads/2019/06/EcDSA.verify-300x235.png 300w" sizes="(max-width: 684px) 100vw, 684px"><p id="caption-attachment-16823" class="wp-caption-text"><em>EcDSA.verify.sh</em></p></div>
<p><strong>CHOICES ON FORMATTING</strong></p>
<p>The signature format used within bitcoin is based on DER encoding. Other methods have been applied in the original code has changed significantly in the last seven years. The choice of DER encoding for the signatures and other information was based on a desire to ensure that information could be shared between incompatible systems. It is not the most efficient means of storing information but it does allow for disparate systems to communicate efficiently.</p>
<p>Like many open source projects, OpenSSL is poorly documented in many areas. bitcoin addressing and the storage of key pairs could have been far more efficient and the code has been updated to ensure that this is now the case. But like every new system it is far better to have something that is working on something that is not available but is aiming at perfection.</p>
<p>Security is always a risk function and not an absolute.</p>
<h3>REFERENCES</h3>
<p>[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lovasz, Laszlo (1979) “Combinatorial Problems and Exercises” North Holand Publishing Co. Amsterdam</p>